---
import vehicleData from '../data/vehicle-info.json';
import { getLangFromUrl, useTranslations } from '../i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const { contactReasons } = vehicleData;
---

<div class="bg-white rounded-lg p-6 border border-gray-200">
  <h3 class="text-lg font-bold text-gray-800 mb-4 text-center">📞 {t('contact.title')}</h3>
  
  <form id="contactForm" class="space-y-4">
    <!-- Hidden field for Web3Forms -->
    <input type="hidden" name="access_key" value="3e15a306-d815-4638-8b6d-e2318dc7bc57">
    
    <!-- Contact reason -->
    <div>
      <label class="block text-sm font-medium text-gray-700 mb-2">
        {t('contact.reason.label')}
      </label>
      <div class="space-y-2">
        <label class="flex items-center p-3 border rounded-lg cursor-pointer hover:bg-gray-50 transition-colors">
          <input 
            type="radio" 
            name="reason" 
            value="blocking"
            class="mr-3 text-blue-600"
            required
          />
          <span class="text-sm">🚗 {t('contact.reason.blocking')}</span>
        </label>
        <label class="flex items-center p-3 border rounded-lg cursor-pointer hover:bg-gray-50 transition-colors">
          <input 
            type="radio" 
            name="reason" 
            value="accident"
            class="mr-3 text-blue-600"
            required
          />
          <span class="text-sm">⚠️ {t('contact.reason.accident')}</span>
        </label>
        <label class="flex items-center p-3 border rounded-lg cursor-pointer hover:bg-gray-50 transition-colors">
          <input 
            type="radio" 
            name="reason" 
            value="parking"
            class="mr-3 text-blue-600"
            required
          />
          <span class="text-sm">🅿️ {t('contact.reason.parking')}</span>
        </label>
        <label class="flex items-center p-3 border rounded-lg cursor-pointer hover:bg-gray-50 transition-colors">
          <input 
            type="radio" 
            name="reason" 
            value="other"
            class="mr-3 text-blue-600"
            required
          />
          <span class="text-sm">📝 {t('contact.reason.other')}</span>
        </label>
      </div>
    </div>
    
    <!-- Name -->
    <div>
      <label for="name" class="block text-sm font-medium text-gray-700 mb-1">
        {t('contact.name')}
      </label>
      <input 
        type="text" 
        id="name" 
        name="name" 
        required
        class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
        placeholder={t('contact.name.placeholder')}
      />
    </div>
    
    <!-- Phone -->
    <div>
      <label for="phone" class="block text-sm font-medium text-gray-700 mb-1">
        {t('contact.phone')}
      </label>
      <input 
        type="tel" 
        id="phone" 
        name="phone" 
        required
        class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
        placeholder={t('contact.phone.placeholder')}
      />
    </div>
    
    <!-- Message -->
    <div>
      <label for="message" class="block text-sm font-medium text-gray-700 mb-1">
        {t('contact.message')}
      </label>
      <textarea 
        id="message" 
        name="message" 
        rows="3"
        class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
        placeholder={t('contact.message.placeholder')}
      ></textarea>
    </div>
    
    <!-- Privacy Notice -->
    <div class="bg-blue-50 border border-blue-200 rounded-lg p-3 mb-4">
      <p class="text-xs text-blue-700">
        🔒 {t('contact.privacy')}
      </p>
    </div>
    
    <!-- Submit button -->
    <button 
      type="submit" 
      class="w-full bg-blue-600 text-white py-3 px-4 rounded-lg font-medium hover:bg-blue-700 transition-colors flex items-center justify-center"
      id="submitBtn"
    >
      <span id="submitText">📤 {t('contact.submit')}</span>
      <span id="loadingText" class="hidden">⏳ {t('contact.sending')}</span>
    </button>
  </form>
  
  <!-- Status messages -->
  <div id="statusMessage" class="hidden mt-4 p-4 rounded-lg"></div>
  
  <!-- Success state with options -->
  <div id="successOptions" class="hidden mt-4 space-y-3">
    <div class="p-4 bg-green-50 rounded-lg border border-green-200">
      <p class="text-green-800 text-sm mb-3">
        ✅ {t('contact.success')}
      </p>
      <div class="flex gap-2">
        <button 
          id="sendAnotherBtn"
          class="px-4 py-2 bg-blue-600 text-white text-sm rounded-lg hover:bg-blue-700 transition-colors"
        >
          📝 Send Another Message
        </button>
        <button 
          id="newContactBtn"
          class="px-4 py-2 bg-gray-600 text-white text-sm rounded-lg hover:bg-gray-700 transition-colors"
        >
          🆕 New Contact
        </button>
      </div>
    </div>
  </div>
</div>

<script define:vars={{ 
  successMessage: t('contact.success'),
  errorMessage: t('contact.error'),
  sendingText: t('contact.sending'),
  submitText: t('contact.submit')
}}>
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('contactForm');
    const submitBtn = document.getElementById('submitBtn');
    const submitText = document.getElementById('submitText');
    const loadingText = document.getElementById('loadingText');
    const statusMessage = document.getElementById('statusMessage');
    const successOptions = document.getElementById('successOptions');
    const sendAnotherBtn = document.getElementById('sendAnotherBtn');
    const newContactBtn = document.getElementById('newContactBtn');
    
    // Cookie helper functions
    function setCookie(name, value, hours) {
      const date = new Date();
      date.setTime(date.getTime() + (hours * 60 * 60 * 1000));
      document.cookie = `${name}=${value};expires=${date.toUTCString()};path=/;SameSite=Strict`;
    }
    
    function getCookie(name) {
      const nameEQ = name + "=";
      const ca = document.cookie.split(';');
      for(let i = 0; i < ca.length; i++) {
        let c = ca[i];
        while (c.charAt(0) === ' ') c = c.substring(1, c.length);
        if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
      }
      return null;
    }
    
    function deleteCookie(name: string) {
      document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:01 GMT;path=/;SameSite=Strict`;
    }
    
    // Save form data to cookies
    function saveFormData() {
      const formData = {
        reason: form.querySelector('input[name="reason"]:checked')?.value || '',
        name: form.querySelector('#name').value,
        phone: form.querySelector('#phone').value,
        message: form.querySelector('#message').value
      };
      setCookie('lastFormData', JSON.stringify(formData), 24);
    }
    
    // Load form data from cookies
    function loadFormData() {
      const savedData = getCookie('lastFormData');
      if (savedData) {
        try {
          const formData = JSON.parse(savedData);
          
          // Set reason radio button
          if (formData.reason) {
            const reasonInput = form.querySelector(`input[name="reason"][value="${formData.reason}"]`);
            if (reasonInput) {
              reasonInput.checked = true;
            }
          }
          
          // Set name
          if (formData.name) {
            form.querySelector('#name').value = formData.name;
          }
          
          // Set phone
          if (formData.phone) {
            form.querySelector('#phone').value = formData.phone;
          }
          
          // Set message
          if (formData.message) {
            form.querySelector('#message').value = formData.message;
          }
        } catch (e) {
          // If parsing fails, ignore saved data
          console.log('Failed to parse saved form data');
        }
      }
    }
    
    // Check if message was sent successfully (persists through page refresh)
    const messageStatus = getCookie('contactMessageStatus');
    const today = new Date().toDateString();
    const lastSubmissionDate = getCookie('lastContactDate');
    
    if (messageStatus === 'sent' && lastSubmissionDate === today) {
      // Show success state instead of form
      form.style.display = 'none';
      successOptions.classList.remove('hidden');
    } else if (lastSubmissionDate === today) {
      // Show info message for already sent today
      showStatus('📝 You have already sent a message today. The vehicle owner will contact you.', 'info');
    }
    
    form.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      // Show loading state
      submitBtn.disabled = true;
      submitText.classList.add('hidden');
      loadingText.classList.remove('hidden');
      
      try {
        const formData = new FormData(form);
        
        // Save form data before submission
        saveFormData();
        
        // Add additional data
        formData.append('subject', 'Vehicle Contact Request');
        formData.append('from_name', formData.get('name'));
        
        const response = await fetch('https://api.web3forms.com/submit', {
          method: 'POST',
          body: formData
        });
        
        if (response.ok) {
          form.style.display = 'none';
          statusMessage.classList.add('hidden');
          successOptions.classList.remove('hidden');
          
          // Store submission in cookies (persists through page refresh)
          setCookie('contactMessageStatus', 'sent', 24); // Expires in 24 hours
          setCookie('lastContactDate', today, 24);
          
        } else {
          throw new Error('Form submission failed');
        }
        
      } catch (error) {
        showStatus('❌ ' + errorMessage, 'error');
      } finally {
        // Reset button state
        submitBtn.disabled = false;
        submitText.classList.remove('hidden');
        loadingText.classList.add('hidden');
      }
    });
    
    // Handle "Send Another" button
    sendAnotherBtn.addEventListener('click', function() {
      form.style.display = 'block';
      successOptions.classList.add('hidden');
      statusMessage.classList.add('hidden');
      // Load previous form data instead of resetting
      loadFormData();
    });
    
    // Handle "New Contact" button  
    newContactBtn.addEventListener('click', function() {
      form.style.display = 'block';
      successOptions.classList.add('hidden');
      statusMessage.classList.add('hidden');
      form.reset();
      // Clear cookies to allow new contact
      deleteCookie('contactMessageStatus');
      deleteCookie('lastContactDate');
      deleteCookie('lastFormData');
    });
    
    function showStatus(message: string, type: 'success' | 'error' | 'info') {
      statusMessage.textContent = message;
      statusMessage.className = `mt-4 p-4 rounded-lg ${
        type === 'success' ? 'bg-green-100 text-green-800' :
        type === 'error' ? 'bg-red-100 text-red-800' :
        'bg-blue-100 text-blue-800'
      }`;
      statusMessage.classList.remove('hidden');
      
      // Auto-hide after 5 seconds
      setTimeout(() => {
        statusMessage.classList.add('hidden');
      }, 5000);
    }
  });
</script>
